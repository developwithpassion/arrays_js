{"version":3,"sources":["index.js","curry.js","arrays.js"],"names":["curry","fn","args","length","more","should_finish_iteration","continue_iteration","each_until","visitor","target","items","Array","prototype","slice","call","index","each_in_reverse_until","_each","direction","each","each_in_reverse","reduce","initial_value","reducer","accumulator","value","array","first_with_target","condition","result","match","find_first_in_direction","condition_or_target","isArray","rest","pop","last","first","any","none","filter","constraint","acc","val","push","map","mapper","flat_map","results","next_item","concat","flatten","item","uniq_with_target_and_mapper","mapped","findIndex","uniq","mapper_or_target","true_for_all","max","value_resolver","max_value","item_value","default_comparer","a","b","sort_with_comparer_and_target","comparer","target_to_sort","sort","comparer_or_target","generate","number","_","fill"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export { default } from './curry';\n","const curry = (fn, ...args) =>\n  fn.length <= args.length ? fn(...args) : (...more) => curry(fn, ...args, ...more);\n\nexport default curry;\n","import curry from '@developwithpassion/curry_js';\n\nconst should_finish_iteration = continue_iteration => continue_iteration === false;\n\nexport const each_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = 0; index < items.length; index++) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (should_finish_iteration(continue_iteration)) return;\n  }\n});\n\nexport const each_in_reverse_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = items.length - 1; index >= 0; index--) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (should_finish_iteration(continue_iteration)) return;\n  }\n});\n\nconst _each = direction =>\n  curry((visitor, target) =>\n    direction((...args) => {\n      visitor(...args);\n    }, target)\n  );\n\nexport const each = _each(each_until);\n\nexport const each_in_reverse = _each(each_in_reverse_until);\n\nexport const reduce = curry((initial_value, reducer, target) => {\n  let accumulator = initial_value;\n\n  each((value, index, array) => {\n    accumulator = reducer(accumulator, value, index, array);\n  }, target);\n  return accumulator;\n});\n\nconst first_with_target = curry((direction, condition, target) => {\n  let result = null;\n\n  direction((...args) => {\n    const match = condition(...args);\n\n    if (match) result = args[0];\n\n    return !match;\n  }, target);\n\n  return result;\n});\n\nconst find_first_in_direction = direction => (condition_or_target, ...rest) => {\n  if (Array.isArray(condition_or_target)) return condition_or_target[0] || null;\n  if (condition_or_target === null) return null;\n  const condition = condition_or_target;\n\n  return rest.length > 0\n    ? first_with_target(direction, condition, rest.pop())\n    : first_with_target(direction, condition);\n};\n\nexport const last = find_first_in_direction(each_in_reverse_until);\n\nexport const first = find_first_in_direction(each_until);\n\nexport const any = curry((condition, target) => !!first(condition, target));\n\nexport const none = curry((condition, target) => !any(condition, target));\n\nexport const filter = curry((constraint, target) =>\n  reduce(\n    [],\n    (acc, val, ...args) => {\n      if (constraint(val, ...args)) {\n        acc.push(val);\n      }\n      return acc;\n    },\n    target\n  )\n);\n\nexport const map = curry((mapper, target) =>\n  reduce(\n    [],\n    (acc, ...args) => {\n      acc.push(mapper(...args));\n      return acc;\n    },\n    target\n  )\n);\n\nexport const flat_map = curry((mapper, target) =>\n  reduce([], (results, next_item) => results.concat(mapper(next_item)), target)\n);\n\nconst flatten = flat_map(item => (Array.isArray(item) ? flatten(item) : [item]));\n\nconst uniq_with_target_and_mapper = curry((mapper, target) =>\n  filter((value, index) => {\n    const mapped = mapper(value);\n    const first_matching_index = target.findIndex(value => mapper(value) === mapped);\n    return index === first_matching_index;\n  }, target)\n);\n\nexport const uniq = (mapper_or_target, ...args) =>\n  args.length === 0 && Array.isArray(mapper_or_target)\n    ? uniq_with_target_and_mapper(val => val, mapper_or_target)\n    : uniq_with_target_and_mapper(mapper_or_target, ...args);\n\nexport const true_for_all = curry((condition, target) =>\n  reduce(true, (acc, ...args) => acc && condition(...args), target)\n);\n\nexport const max = curry((value_resolver, target) =>\n  reduce(\n    0,\n    (max_value, ...args) => {\n      const item_value = value_resolver(...args);\n      return item_value > max_value ? item_value : max_value;\n    },\n    target\n  )\n);\n\nconst default_comparer = (a, b) => (a < b ? -1 : a > b ? 1 : 0);\n\nconst sort_with_comparer_and_target = curry((comparer, target) => {\n  const target_to_sort = target || [];\n  const results = target_to_sort.slice(0);\n\n  results.sort(comparer);\n\n  return results;\n});\n\nexport const sort = (comparer_or_target, ...args) => {\n  if (comparer_or_target === null) return [];\n  if (Array.isArray(comparer_or_target))\n    return sort_with_comparer_and_target(default_comparer, comparer_or_target);\n\n  return sort_with_comparer_and_target(comparer_or_target, ...args);\n};\n\nexport const generate = (number, mapper) => map((_, index) => mapper(index), new Array(number).fill(null));\n\nexport default {\n  each,\n  each_until,\n  each_in_reverse,\n  each_in_reverse_until,\n  last,\n  first,\n  any,\n  none,\n  filter,\n  map,\n  flat_map,\n  flatten,\n  uniq,\n  true_for_all,\n  reduce,\n  sort,\n  max,\n  generate\n};\n"]}