{"version":3,"sources":["index.js","curry.js","arrays.js"],"names":["curry","fn","args","length","more","each_until","visitor","target","items","Array","prototype","slice","call","index","continue_iteration","each_in_reverse_until","_each","direction","each","each_in_reverse","operators","reduce","initial_value_or_symbol","reducer_or_initial_value_for_symbolic_reduce","rest","pop","indexOf","reduce_using_operator","apply","concat","reduce_using_reducer","reducer","initial_value","start_index","undefined","accumulator","value","array","symbol","body","Function","first_with_target","condition","result","match","find_first_in_direction","condition_or_target","isArray","last","first","any","none","filter","constraint","acc","val","push","map","mapper","flat_map","results","next_item","flatten","item","uniq_with_target_and_mapper","mapped","findIndex","uniq","mapper_or_target","true_for_all","max","value_resolver","max_value","item_value","default_comparer","a","b","sort_with_comparer_and_target","comparer","target_to_sort","sort","comparer_or_target","generate","number","_","fill"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export { default } from './curry';\n","const curry = (fn, ...args) =>\n  fn.length <= args.length ? fn(...args) : (...more) => curry(fn, ...args, ...more);\n\nexport default curry;\n","import curry from '@developwithpassion/curry_js';\n\nexport const each_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = 0; index < items.length; index++) {\n    const continue_iteration = visitor(items[index], index, items);\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nexport const each_in_reverse_until = curry((visitor, target) => {\n  const items = Array.prototype.slice.call(target, 0);\n\n  for (let index = items.length - 1; index >= 0; index--) {\n    const continue_iteration = visitor(items[index], index, items);\n\n    if (typeof continue_iteration !== 'undefined' && continue_iteration !== null) {\n      if (continue_iteration === false) {\n        return;\n      }\n    }\n  }\n});\n\nconst _each = direction =>\n  curry((visitor, target) =>\n    direction((...args) => {\n      visitor(...args);\n    }, target)\n  );\n\nexport const each = _each(each_until);\n\nexport const each_in_reverse = _each(each_in_reverse_until);\n\nconst operators = ['+', '-', '/', '*'];\n\nexport const reduce = curry(\n  (initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, ...rest) => {\n    const target = rest.pop();\n\n    if (operators.indexOf(initial_value_or_symbol) > -1)\n      return reduce_using_operator.apply(\n        null,\n        [initial_value_or_symbol, reducer_or_initial_value_for_symbolic_reduce, target].concat(rest)\n      );\n\n    return reduce_using_reducer.apply(\n      null,\n      [reducer_or_initial_value_for_symbolic_reduce, initial_value_or_symbol, target].concat(rest)\n    );\n  }\n);\n\nfunction reduce_using_reducer(reducer, initial_value, target) {\n  let start_index = 0;\n\n  if (initial_value === undefined) {\n    initial_value = target[0];\n    start_index = 1;\n  }\n\n  let accumulator = initial_value;\n\n  each((value, index, array) => {\n    if (index >= start_index) {\n      accumulator = reducer(accumulator, value, index, array);\n    }\n  }, target);\n  return accumulator;\n}\n\nfunction reduce_using_operator(symbol, initial_value, target) {\n  const body = `return accumulator ${symbol}=current_value`;\n\n  const reducer = new Function('accumulator, current_value', body);\n\n  return reduce_using_reducer(reducer, initial_value, target);\n}\n\nconst first_with_target = curry((direction, condition, target) => {\n  let result = null;\n\n  direction((...args) => {\n    const match = condition(...args);\n\n    if (match) result = args[0];\n\n    return !match;\n  }, target);\n\n  return result;\n});\n\nfunction find_first_in_direction(direction) {\n  return (condition_or_target, ...rest) => {\n    if (Array.isArray(condition_or_target)) return condition_or_target[0] || null;\n    if (condition_or_target === null) return null;\n    const condition = condition_or_target;\n\n    return rest.length > 0\n      ? first_with_target(direction, condition, rest.pop())\n      : first_with_target(direction, condition);\n  };\n}\n\nexport const last = find_first_in_direction(each_in_reverse_until);\n\nexport const first = find_first_in_direction(each_until);\n\nexport const any = curry((condition, target) => !!first(condition, target));\n\nexport const none = curry((condition, target) => !any(condition, target));\n\nexport const filter = curry((constraint, target) =>\n  reduce(\n    [],\n    (acc, val, ...args) => {\n      if (constraint(val, ...args)) {\n        acc.push(val);\n      }\n      return acc;\n    },\n    target\n  )\n);\n\nexport const map = curry((mapper, target) =>\n  reduce(\n    [],\n    (acc, ...args) => {\n      acc.push(mapper(...args));\n      return acc;\n    },\n    target\n  )\n);\n\nexport const flat_map = curry((mapper, target) =>\n  reduce([], (results, next_item) => results.concat(mapper(next_item)), target)\n);\n\nconst flatten = flat_map(item => (Array.isArray(item) ? flatten(item) : [item]));\n\nconst uniq_with_target_and_mapper = curry((mapper, target) =>\n  filter((value, index) => {\n    const mapped = mapper(value);\n    const first_matching_index = target.findIndex(value => mapper(value) === mapped);\n    return index === first_matching_index;\n  }, target)\n);\n\nexport const uniq = (mapper_or_target, ...args) =>\n  args.length === 0 && Array.isArray(mapper_or_target)\n    ? uniq_with_target_and_mapper(val => val, mapper_or_target)\n    : uniq_with_target_and_mapper(mapper_or_target, ...args);\n\nexport const true_for_all = curry((condition, target) =>\n  reduce(true, (acc, ...args) => acc && condition(...args), target)\n);\n\nexport const max = curry((value_resolver, target) =>\n  reduce(\n    0,\n    (max_value, ...args) => {\n      const item_value = value_resolver(...args);\n      return item_value > max_value ? item_value : max_value;\n    },\n    target\n  )\n);\n\nconst default_comparer = (a, b) => (a < b ? -1 : a > b ? 1 : 0);\n\nconst sort_with_comparer_and_target = curry((comparer, target) => {\n  const target_to_sort = target || [];\n  const results = target_to_sort.slice(0);\n\n  results.sort(comparer);\n\n  return results;\n});\n\nexport const sort = (comparer_or_target, ...args) => {\n  if (comparer_or_target === null) return [];\n  if (Array.isArray(comparer_or_target))\n    return sort_with_comparer_and_target(default_comparer, comparer_or_target);\n\n  return sort_with_comparer_and_target(comparer_or_target, ...args);\n};\n\nexport const generate = (number, mapper) => map((_, index) => mapper(index), new Array(number).fill(null));\n\nexport default {\n  each,\n  each_until,\n  each_in_reverse,\n  each_in_reverse_until,\n  last,\n  first,\n  any,\n  none,\n  filter,\n  map,\n  flat_map,\n  flatten,\n  uniq,\n  true_for_all,\n  reduce,\n  sort,\n  max,\n  generate\n};\n"]}